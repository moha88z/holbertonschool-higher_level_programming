>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

# Normal division with int matrix and int divisor
>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

# Float matrix and float divisor
>>> matrix_divided([[1.5, 3.0], [6.0, 4.5]], 1.5)
[[1.0, 2.0], [4.0, 3.0]]

# Single row matrix
>>> matrix_divided([[10, 20, 30]], 10)
[[1.0, 2.0, 3.0]]

# matrix= list of lists of integers / div= float(inf) => all values == 0.0
>>> matrix_divided([[1, 2], [3, 4]], float('inf'))
[[0.0, 0.0], [0.0, 0.0]]

# Missing one argument
>>> matrix_divided([[1, 2], [3, 4]])
Traceback (most recent call last):
...
TypeError: matrix_divided() missing 1 required positional argument: 'div'

# Missing two arguments
>>> matrix_divided()
Traceback (most recent call last):
...
TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

# Invalid matrix: not a list
>>> matrix_divided("hello", 2)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

# Invalid matrix: element not list
>>> matrix_divided([1, 2, 3], 2)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

# Invalid matrix: inconsistent row sizes
>>> matrix_divided([[1, 2], [3, 4, 5]], 2)
Traceback (most recent call last):
...
TypeError: Each row of the matrix must have the same size

# Invalid matrix: contains non-numeric element
>>> matrix_divided([[1, 2], ["x", 4]], 2)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

# Invalid div: zero
>>> matrix_divided([[1, 2], [3, 4]], 0)
Traceback (most recent call last):
...
ZeroDivisionError: division by zero

# Invalid div: not a number
>>> matrix_divided([[1, 2], [3, 4]], "div")
Traceback (most recent call last):
...
TypeError: div must be a number

